/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.term_project.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.term_project.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Term_projectFactoryImpl extends EFactoryImpl implements Term_projectFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Term_projectFactory init()
  {
    try
    {
      Term_projectFactory theTerm_projectFactory = (Term_projectFactory)EPackage.Registry.INSTANCE.getEFactory(Term_projectPackage.eNS_URI);
      if (theTerm_projectFactory != null)
      {
        return theTerm_projectFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Term_projectFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term_projectFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Term_projectPackage.MODEL: return createModel();
      case Term_projectPackage.TEAM_GOAL_OR_TASK: return createTeam_goal_or_task();
      case Term_projectPackage.TEAM_DEFINITION: return createTeamDefinition();
      case Term_projectPackage.ROBOT_DEFINITION: return createRobotDefinition();
      case Term_projectPackage.GOAL_DEFINITION: return createGoalDefinition();
      case Term_projectPackage.TASK_DEFINITION: return createTaskDefinition();
      case Term_projectPackage.CONDITION: return createCondition();
      case Term_projectPackage.TASK_STATEMENT: return createTaskStatement();
      case Term_projectPackage.MOVE_TO_STATEMENT: return createMoveToStatement();
      case Term_projectPackage.SIMULATE_STATEMENT: return createSimulateStatement();
      case Term_projectPackage.RUN_STATEMENT: return createRunStatement();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Team_goal_or_task createTeam_goal_or_task()
  {
    Team_goal_or_taskImpl team_goal_or_task = new Team_goal_or_taskImpl();
    return team_goal_or_task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TeamDefinition createTeamDefinition()
  {
    TeamDefinitionImpl teamDefinition = new TeamDefinitionImpl();
    return teamDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RobotDefinition createRobotDefinition()
  {
    RobotDefinitionImpl robotDefinition = new RobotDefinitionImpl();
    return robotDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GoalDefinition createGoalDefinition()
  {
    GoalDefinitionImpl goalDefinition = new GoalDefinitionImpl();
    return goalDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskDefinition createTaskDefinition()
  {
    TaskDefinitionImpl taskDefinition = new TaskDefinitionImpl();
    return taskDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskStatement createTaskStatement()
  {
    TaskStatementImpl taskStatement = new TaskStatementImpl();
    return taskStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveToStatement createMoveToStatement()
  {
    MoveToStatementImpl moveToStatement = new MoveToStatementImpl();
    return moveToStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimulateStatement createSimulateStatement()
  {
    SimulateStatementImpl simulateStatement = new SimulateStatementImpl();
    return simulateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RunStatement createRunStatement()
  {
    RunStatementImpl runStatement = new RunStatementImpl();
    return runStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Term_projectPackage getTerm_projectPackage()
  {
    return (Term_projectPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Term_projectPackage getPackage()
  {
    return Term_projectPackage.eINSTANCE;
  }

} //Term_projectFactoryImpl
