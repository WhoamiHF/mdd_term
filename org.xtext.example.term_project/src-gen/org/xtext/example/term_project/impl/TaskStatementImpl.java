/**
 * generated by Xtext 2.36.0
 */
package org.xtext.example.term_project.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.term_project.MoveToStatement;
import org.xtext.example.term_project.TaskStatement;
import org.xtext.example.term_project.Term_projectPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.term_project.impl.TaskStatementImpl#getTeam <em>Team</em>}</li>
 *   <li>{@link org.xtext.example.term_project.impl.TaskStatementImpl#getRobot <em>Robot</em>}</li>
 *   <li>{@link org.xtext.example.term_project.impl.TaskStatementImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskStatementImpl extends MinimalEObjectImpl.Container implements TaskStatement
{
  /**
   * The default value of the '{@link #getTeam() <em>Team</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTeam()
   * @generated
   * @ordered
   */
  protected static final String TEAM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTeam() <em>Team</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTeam()
   * @generated
   * @ordered
   */
  protected String team = TEAM_EDEFAULT;

  /**
   * The default value of the '{@link #getRobot() <em>Robot</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobot()
   * @generated
   * @ordered
   */
  protected static final String ROBOT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRobot() <em>Robot</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRobot()
   * @generated
   * @ordered
   */
  protected String robot = ROBOT_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected MoveToStatement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Term_projectPackage.Literals.TASK_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTeam()
  {
    return team;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTeam(String newTeam)
  {
    String oldTeam = team;
    team = newTeam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Term_projectPackage.TASK_STATEMENT__TEAM, oldTeam, team));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRobot()
  {
    return robot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRobot(String newRobot)
  {
    String oldRobot = robot;
    robot = newRobot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Term_projectPackage.TASK_STATEMENT__ROBOT, oldRobot, robot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveToStatement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(MoveToStatement newStatement, NotificationChain msgs)
  {
    MoveToStatement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Term_projectPackage.TASK_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(MoveToStatement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Term_projectPackage.TASK_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Term_projectPackage.TASK_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Term_projectPackage.TASK_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Term_projectPackage.TASK_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Term_projectPackage.TASK_STATEMENT__TEAM:
        return getTeam();
      case Term_projectPackage.TASK_STATEMENT__ROBOT:
        return getRobot();
      case Term_projectPackage.TASK_STATEMENT__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Term_projectPackage.TASK_STATEMENT__TEAM:
        setTeam((String)newValue);
        return;
      case Term_projectPackage.TASK_STATEMENT__ROBOT:
        setRobot((String)newValue);
        return;
      case Term_projectPackage.TASK_STATEMENT__STATEMENT:
        setStatement((MoveToStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Term_projectPackage.TASK_STATEMENT__TEAM:
        setTeam(TEAM_EDEFAULT);
        return;
      case Term_projectPackage.TASK_STATEMENT__ROBOT:
        setRobot(ROBOT_EDEFAULT);
        return;
      case Term_projectPackage.TASK_STATEMENT__STATEMENT:
        setStatement((MoveToStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Term_projectPackage.TASK_STATEMENT__TEAM:
        return TEAM_EDEFAULT == null ? team != null : !TEAM_EDEFAULT.equals(team);
      case Term_projectPackage.TASK_STATEMENT__ROBOT:
        return ROBOT_EDEFAULT == null ? robot != null : !ROBOT_EDEFAULT.equals(robot);
      case Term_projectPackage.TASK_STATEMENT__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (team: ");
    result.append(team);
    result.append(", robot: ");
    result.append(robot);
    result.append(')');
    return result.toString();
  }

} //TaskStatementImpl
